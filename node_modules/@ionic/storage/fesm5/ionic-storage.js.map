{"version":3,"file":"ionic-storage.js","sources":["ng://@ionic/storage/storage.ts","ng://@ionic/storage/index.ts","ng://@ionic/storage/ionic-storage.ts"],"sourcesContent":["import { InjectionToken, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport * as LocalForage from 'localforage';\n\nimport * as CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\n\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * @usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * ionic cordova plugin add cordova-sqlite-storage\n * ```\n *\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\n * ```bash\n * npm install --save @ionic/storage\n * ```\n *\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     BrowserModule,\n *     IonicModule.forRoot(MyApp),\n *     IonicStorageModule.forRoot()\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: [\n *     // ...\n *   ]\n * })\n * export class AppModule {}\n *```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '@ionic/storage';\n\n * export class MyApp {\n *   constructor(private storage: Storage) { }\n *\n *   ...\n *\n *   // set a key/value\n *   storage.set('name', 'Max');\n *\n *   // Or to get a key/value pair\n *   storage.get('age').then((val) => {\n *     console.log('Your age is', val);\n *   });\n * }\n * ```\n *\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [...],\n *   imports: [\n *     IonicStorageModule.forRoot({\n *       name: '__mydb',\n         driverOrder: ['indexeddb', 'sqlite', 'websql']\n *     })\n *   ],\n *   bootstrap: [...],\n *   entryComponents: [...],\n *    providers: [...]\n * })\n * export class AppModule { }\n * ```\n */\nexport class Storage {\n  private _dbPromise: Promise<LocalForage>;\n  private _driver: string = null;\n\n  /**\n   * Create a new Storage instance using the order of drivers and any additional config\n   * options to pass to LocalForage.\n   *\n   * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n   * default is that exact ordering.\n   */\n  constructor(\n    config: StorageConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    this._dbPromise = new Promise((resolve, reject) => {\n      if (isPlatformServer(this.platformId)) {\n        const noopDriver = getNoopDriver();\n        resolve(noopDriver);\n        return;\n      }\n\n      let db: LocalForage;\n\n      const defaultConfig = getDefaultConfig();\n      const actualConfig = Object.assign(defaultConfig, config || {});\n\n      LocalForage.defineDriver(CordovaSQLiteDriver)\n        .then(() => {\n          db = LocalForage.createInstance(actualConfig);\n        })\n        .then(() =>\n          db.setDriver(this._getDriverOrder(actualConfig.driverOrder))\n        )\n        .then(() => {\n          this._driver = db.driver();\n          resolve(db);\n        })\n        .catch((reason) => reject(reason));\n    });\n  }\n\n  /**\n   * Get the name of the driver being used.\n   * @returns Name of the driver\n   */\n  get driver(): string | null {\n    return this._driver;\n  }\n\n  /**\n   * Reflect the readiness of the store.\n   * @returns Returns a promise that resolves when the store is ready\n   */\n  ready(): Promise<LocalForage> {\n    return this._dbPromise;\n  }\n\n  /** @hidden */\n  private _getDriverOrder(driverOrder: string[]) {\n    return driverOrder.map((driver: string) => {\n      switch (driver) {\n        case 'sqlite':\n          return CordovaSQLiteDriver._driver;\n        case 'indexeddb':\n          return LocalForage.INDEXEDDB;\n        case 'websql':\n          return LocalForage.WEBSQL;\n        case 'localstorage':\n          return LocalForage.LOCALSTORAGE;\n      }\n    });\n  }\n\n  /**\n   * Get the value associated with the given key.\n   * @param key the key to identify this value\n   * @returns Returns a promise with the value of the given key\n   */\n  get(key: string): Promise<any> {\n    return this._dbPromise.then((db) => db.getItem(key));\n  }\n\n  /**\n   * Set the value for the given key.\n   * @param key the key to identify this value\n   * @param value the value for this key\n   * @returns Returns a promise that resolves when the key and value are set\n   */\n  set(key: string, value: any): Promise<any> {\n    return this._dbPromise.then((db) => db.setItem(key, value));\n  }\n\n  /**\n   * Remove any value associated with this key.\n   * @param key the key to identify this value\n   * @returns Returns a promise that resolves when the value is removed\n   */\n  remove(key: string): Promise<any> {\n    return this._dbPromise.then((db) => db.removeItem(key));\n  }\n\n  /**\n   * Clear the entire key value store. WARNING: HOT!\n   * @returns Returns a promise that resolves when the store is cleared\n   */\n  clear(): Promise<void> {\n    return this._dbPromise.then((db) => db.clear());\n  }\n\n  /**\n   * @returns Returns a promise that resolves with the number of keys stored.\n   */\n  length(): Promise<number> {\n    return this._dbPromise.then((db) => db.length());\n  }\n\n  /**\n   * @returns Returns a promise that resolves with the keys in the store.\n   */\n  keys(): Promise<string[]> {\n    return this._dbPromise.then((db) => db.keys());\n  }\n\n  /**\n   * Iterate through each key,value pair.\n   * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n   * @returns Returns a promise that resolves when the iteration has finished.\n   */\n  forEach(\n    iteratorCallback: (value: any, key: string, iterationNumber: Number) => any\n  ): Promise<void> {\n    return this._dbPromise.then((db) => db.iterate(iteratorCallback));\n  }\n}\n\n/** @hidden */\nexport function getDefaultConfig() {\n  return {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    dbKey: '_ionickey',\n    driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage'],\n  };\n}\n\n/** @hidden */\nexport interface StorageConfig {\n  name?: string;\n  version?: number;\n  size?: number;\n  storeName?: string;\n  description?: string;\n  driverOrder?: string[];\n  dbKey?: string;\n}\n\n/** @hidden */\nexport const StorageConfigToken = new InjectionToken<any>(\n  'STORAGE_CONFIG_TOKEN'\n);\n\n/** @hidden */\nexport function provideStorage(\n  storageConfig: StorageConfig,\n  platformID: Object\n): Storage {\n  const config = !!storageConfig ? storageConfig : getDefaultConfig();\n  return new Storage(config, platformID);\n}\n\nfunction getNoopDriver() {\n  // noop driver for ssr environment\n  const noop = () => {};\n  const driver: any = {\n    getItem: noop,\n    setItem: noop,\n    removeItem: noop,\n    clear: noop,\n    length: () => 0,\n    keys: () => [],\n    iterate: noop,\n  };\n  return driver;\n}\n","import { NgModule, ModuleWithProviders, PLATFORM_ID } from '@angular/core';\nimport {\n  getDefaultConfig,\n  provideStorage,\n  Storage,\n  StorageConfig,\n  StorageConfigToken\n} from './storage';\n\nexport { StorageConfig, StorageConfigToken, Storage };\n\n@NgModule()\nexport class IonicStorageModule {\n  static forRoot(storageConfig: StorageConfig = null): ModuleWithProviders<IonicStorageModule> {\n    return {\n      ngModule: IonicStorageModule,\n      providers: [\n        { provide: StorageConfigToken, useValue: storageConfig },\n        {\n          provide: Storage,\n          useFactory: provideStorage,\n          deps: [StorageConfigToken, PLATFORM_ID ]\n        }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {provideStorage as Éµa} from './storage';"],"names":["LocalForage.defineDriver","LocalForage.createInstance","CordovaSQLiteDriver._driver","LocalForage.INDEXEDDB","LocalForage.WEBSQL","LocalForage.LOCALSTORAGE"],"mappings":"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"}